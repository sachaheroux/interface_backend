#!/usr/bin/env python3
"""
Test des am√©liorations des algorithmes de ligne d'assemblage
- Affichage des noms de t√¢ches au lieu des num√©ros
- Graphiques avec barres empil√©es
"""

import requests
import json

def test_comsoal():
    print("=== TEST COMSOAL ===")
    
    # Donn√©es de test avec noms personnalis√©s
    data = {
        "tasks_data": [
            {"id": 1, "name": "Assemblage base", "predecessors": None, "duration": 20},
            {"id": 2, "name": "Montage moteur", "predecessors": 1, "duration": 6},
            {"id": 3, "name": "Installation roues", "predecessors": 2, "duration": 5},
            {"id": 4, "name": "Peinture carrosserie", "predecessors": None, "duration": 21},
            {"id": 5, "name": "Pose vitres", "predecessors": None, "duration": 8}
        ],
        "cycle_time": 30,
        "unite": "minutes",
        "seed": 42
    }
    
    try:
        response = requests.post("http://127.0.0.1:8000/ligne_assemblage/comsoal", json=data)
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ COMSOAL - Succ√®s!")
            print(f"Nombre de stations: {result['metrics']['nombre_stations']}")
            print(f"Efficacit√©: {result['metrics']['efficacite']}%")
            
            # V√©rifier que les stations contiennent les bons IDs
            print("\nStations:")
            for station in result['stations']:
                print(f"  Station {station['id']}: T√¢ches {station['tasks']} ({station['utilization']:.1f}%)")
            
            return True
        else:
            print(f"‚ùå COMSOAL - Erreur {response.status_code}: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå COMSOAL - Exception: {e}")
        return False

def test_lpt():
    print("\n=== TEST LPT ===")
    
    # Donn√©es de test avec noms personnalis√©s
    data = {
        "tasks_data": [
            {"id": 1, "name": "Pr√©paration mat√©riel", "predecessors": None, "duration": 15},
            {"id": 2, "name": "Usinage pi√®ce A", "predecessors": 1, "duration": 12},
            {"id": 3, "name": "Usinage pi√®ce B", "predecessors": 1, "duration": 18},
            {"id": 4, "name": "Assemblage final", "predecessors": [2, 3], "duration": 10}
        ],
        "cycle_time": 25,
        "unite": "minutes"
    }
    
    try:
        response = requests.post("http://127.0.0.1:8000/ligne_assemblage/lpt", json=data)
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ LPT - Succ√®s!")
            print(f"Nombre de stations: {result['metrics']['nombre_stations']}")
            print(f"Efficacit√©: {result['metrics']['efficacite']}%")
            
            # V√©rifier que les stations contiennent les bons IDs
            print("\nStations:")
            for station in result['stations']:
                print(f"  Station {station['id']}: T√¢ches {station['tasks']} ({station['utilization']:.1f}%)")
            
            return True
        else:
            print(f"‚ùå LPT - Erreur {response.status_code}: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå LPT - Exception: {e}")
        return False

def test_pl():
    print("\n=== TEST PL ===")
    
    # Donn√©es de test avec noms personnalis√©s
    data = {
        "tasks_data": [
            {"id": 1, "name": "D√©coupe mat√©riau", "predecessors": None, "duration": 8},
            {"id": 2, "name": "Per√ßage trous", "predecessors": 1, "duration": 5},
            {"id": 3, "name": "Soudure joints", "predecessors": 2, "duration": 12},
            {"id": 4, "name": "Contr√¥le qualit√©", "predecessors": 3, "duration": 6}
        ],
        "cycle_time": 20,
        "unite": "minutes"
    }
    
    try:
        response = requests.post("http://127.0.0.1:8000/ligne_assemblage/pl", json=data)
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ PL - Succ√®s!")
            print(f"Nombre de stations: {result['metrics']['nombre_stations']}")
            print(f"Efficacit√©: {result['metrics']['efficacite']}%")
            print(f"Statut optimisation: {result['optimization_status']}")
            
            # V√©rifier que les stations contiennent les bons IDs
            print("\nStations:")
            for station in result['stations']:
                print(f"  Station {station['id']}: T√¢ches {station['tasks']} ({station['utilization']:.1f}%)")
            
            return True
        else:
            print(f"‚ùå PL - Erreur {response.status_code}: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå PL - Exception: {e}")
        return False

def test_chart_generation():
    print("\n=== TEST G√âN√âRATION GRAPHIQUES ===")
    
    # Test avec COMSOAL pour v√©rifier la g√©n√©ration de graphique
    data = {
        "tasks_data": [
            {"id": 1, "name": "T√¢che Alpha", "predecessors": None, "duration": 10},
            {"id": 2, "name": "T√¢che Beta", "predecessors": 1, "duration": 8},
            {"id": 3, "name": "T√¢che Gamma", "predecessors": None, "duration": 12}
        ],
        "cycle_time": 15,
        "unite": "minutes",
        "seed": 123
    }
    
    try:
        response = requests.post("http://127.0.0.1:8000/ligne_assemblage/comsoal/chart", json=data)
        if response.status_code == 200:
            print("‚úÖ G√©n√©ration graphique - Succ√®s!")
            print(f"Type de contenu: {response.headers.get('content-type')}")
            print(f"Taille du graphique: {len(response.content)} bytes")
            return True
        else:
            print(f"‚ùå G√©n√©ration graphique - Erreur {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå G√©n√©ration graphique - Exception: {e}")
        return False

if __name__ == "__main__":
    print("üß™ TEST DES AM√âLIORATIONS LIGNE D'ASSEMBLAGE")
    print("=" * 50)
    
    results = []
    results.append(test_comsoal())
    results.append(test_lpt())
    results.append(test_pl())
    results.append(test_chart_generation())
    
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print(f"Tests r√©ussis: {sum(results)}/{len(results)}")
    
    if all(results):
        print("üéâ Tous les tests sont pass√©s avec succ√®s!")
        print("\n‚ú® AM√âLIORATIONS IMPL√âMENT√âES:")
        print("  1. ‚úÖ Noms des t√¢ches dans la configuration des stations")
        print("  2. ‚úÖ Graphiques avec barres empil√©es par t√¢che")
        print("  3. ‚úÖ Noms des t√¢ches dans les graphiques")
        print("  4. ‚úÖ L√©gendes avec noms personnalis√©s")
    else:
        print("‚ùå Certains tests ont √©chou√©") 